define(["./when-23b1aa97","./Cartesian2-fe435665","./Transforms-21fa56f0","./ComponentDatatype-db261df2","./Math-e9e583a9","./GeometryAttribute-e2cab2f1","./GeometryAttributes-bf6191be","./IndexDatatype-5483de1e","./VertexFormat-4b1610fd","./WallGeometryLibrary-b094b0dc","./RuntimeError-acd9a015","./WebGLConstants-c32c4572","./arrayRemoveDuplicates-72d928ba","./PolylinePipeline-1446d6ce","./EllipsoidGeodesic-27d7f111","./EllipsoidRhumbLine-5fcd2f7f","./IntersectionTests-5927aeeb","./Plane-95acb6df"],function(S,I,q,N,M,W,B,U,p,J,e,t,i,r,a,n,o,s){"use strict";var Y=new I.Cartesian3,Z=new I.Cartesian3,j=new I.Cartesian3,K=new I.Cartesian3,Q=new I.Cartesian3,X=new I.Cartesian3,$=new I.Cartesian3;function u(e){var t=(e=S.defaultValue(e,S.defaultValue.EMPTY_OBJECT)).positions,i=e.maximumHeights,r=e.minimumHeights;if(!S.defined(t))throw new M.DeveloperError("options.positions is required.");if(S.defined(i)&&i.length!==t.length)throw new M.DeveloperError("options.positions and options.maximumHeights must have the same length.");if(S.defined(r)&&r.length!==t.length)throw new M.DeveloperError("options.positions and options.minimumHeights must have the same length.");var a=S.defaultValue(e.vertexFormat,p.VertexFormat.DEFAULT),n=S.defaultValue(e.granularity,M.CrystalMath.RADIANS_PER_DEGREE),e=S.defaultValue(e.ellipsoid,I.Ellipsoid.WGS84);this._positions=t,this._minimumHeights=r,this._maximumHeights=i,this._vertexFormat=p.VertexFormat.clone(a),this._granularity=n,this._ellipsoid=I.Ellipsoid.clone(e),this._workerName="createWallGeometry";t=1+t.length*I.Cartesian3.packedLength+2;S.defined(r)&&(t+=r.length),S.defined(i)&&(t+=i.length),this.packedLength=t+I.Ellipsoid.packedLength+p.VertexFormat.packedLength+1}u.pack=function(e,t,i){if(!S.defined(e))throw new M.DeveloperError("value is required");if(!S.defined(t))throw new M.DeveloperError("array is required");var r;i=S.defaultValue(i,0);var a=e._positions,n=a.length;for(t[i++]=n,r=0;r<n;++r,i+=I.Cartesian3.packedLength)I.Cartesian3.pack(a[r],t,i);var o=e._minimumHeights,n=S.defined(o)?o.length:0;if(t[i++]=n,S.defined(o))for(r=0;r<n;++r)t[i++]=o[r];var s=e._maximumHeights;if(n=S.defined(s)?s.length:0,t[i++]=n,S.defined(s))for(r=0;r<n;++r)t[i++]=s[r];return I.Ellipsoid.pack(e._ellipsoid,t,i),i+=I.Ellipsoid.packedLength,p.VertexFormat.pack(e._vertexFormat,t,i),t[i+=p.VertexFormat.packedLength]=e._granularity,t};var f=I.Ellipsoid.clone(I.Ellipsoid.UNIT_SPHERE),h=new p.VertexFormat,c={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:f,vertexFormat:h,granularity:void 0};return u.unpack=function(e,t,i){if(!S.defined(e))throw new M.DeveloperError("array is required");t=S.defaultValue(t,0);for(var r,a,n=e[t++],o=new Array(n),s=0;s<n;++s,t+=I.Cartesian3.packedLength)o[s]=I.Cartesian3.unpack(e,t);if(0<(n=e[t++]))for(r=new Array(n),s=0;s<n;++s)r[s]=e[t++];if(0<(n=e[t++]))for(a=new Array(n),s=0;s<n;++s)a[s]=e[t++];var l=I.Ellipsoid.unpack(e,t,f);t+=I.Ellipsoid.packedLength;var m=p.VertexFormat.unpack(e,t,h),d=e[t+=p.VertexFormat.packedLength];return S.defined(i)?(i._positions=o,i._minimumHeights=r,i._maximumHeights=a,i._ellipsoid=I.Ellipsoid.clone(l,i._ellipsoid),i._vertexFormat=p.VertexFormat.clone(m,i._vertexFormat),i._granularity=d,i):(c.positions=o,c.minimumHeights=r,c.maximumHeights=a,c.granularity=d,new u(c))},u.fromConstantHeights=function(e){var t=(e=S.defaultValue(e,S.defaultValue.EMPTY_OBJECT)).positions;if(!S.defined(t))throw new M.DeveloperError("options.positions is required.");var i=e.minimumHeight,r=e.maximumHeight,a=S.defined(i),n=S.defined(r);if(a||n)for(var o=t.length,s=a?new Array(o):void 0,l=n?new Array(o):void 0,m=0;m<o;++m)a&&(s[m]=i),n&&(l[m]=r);return new u({positions:t,maximumHeights:l,minimumHeights:s,ellipsoid:e.ellipsoid,vertexFormat:e.vertexFormat})},u.createGeometry=function(e){var t=e._positions,i=e._minimumHeights,r=e._maximumHeights,a=e._vertexFormat,n=e._granularity,o=e._ellipsoid,r=J.WallGeometryLibrary.computePositions(o,t,r,i,n,!0);if(S.defined(r)){for(var s=r.bottomPositions,l=r.topPositions,i=r.numCorners,m=l.length,n=2*m,d=a.position?new Float64Array(n):void 0,p=a.normal?new Float32Array(n):void 0,u=a.tangent?new Float32Array(n):void 0,f=a.bitangent?new Float32Array(n):void 0,h=a.st?new Float32Array(n/3*2):void 0,c=0,y=0,g=0,v=0,C=0,w=$,b=X,x=Q,E=!0,A=0,_=1/((m/=3)-i-1),F=0;F<m;++F){var D,L=3*F,H=I.Cartesian3.fromArray(l,L,Y),k=I.Cartesian3.fromArray(s,L,Z);a.position&&(d[c++]=k.x,d[c++]=k.y,d[c++]=k.z,d[c++]=H.x,d[c++]=H.y,d[c++]=H.z),a.st&&(h[C++]=A,h[C++]=0,h[C++]=A,h[C++]=1),(a.normal||a.tangent||a.bitangent)&&(D=I.Cartesian3.clone(I.Cartesian3.ZERO,K),k=I.Cartesian3.subtract(H,o.geodeticSurfaceNormal(H,Z),Z),F+1<m&&(D=I.Cartesian3.fromArray(l,3+L,K)),E&&(L=I.Cartesian3.subtract(D,H,j),k=I.Cartesian3.subtract(k,H,Y),w=I.Cartesian3.normalize(I.Cartesian3.cross(k,L,w),w),E=!1),I.Cartesian3.equalsEpsilon(H,D,M.CrystalMath.EPSILON10)?E=!0:(A+=_,a.tangent&&(b=I.Cartesian3.normalize(I.Cartesian3.subtract(D,H,b),b)),a.bitangent&&(x=I.Cartesian3.normalize(I.Cartesian3.cross(w,b,x),x))),a.normal&&(p[y++]=w.x,p[y++]=w.y,p[y++]=w.z,p[y++]=w.x,p[y++]=w.y,p[y++]=w.z),a.tangent&&(u[v++]=b.x,u[v++]=b.y,u[v++]=b.z,u[v++]=b.x,u[v++]=b.y,u[v++]=b.z),a.bitangent&&(f[g++]=x.x,f[g++]=x.y,f[g++]=x.z,f[g++]=x.x,f[g++]=x.y,f[g++]=x.z))}r=new B.GeometryAttributes;a.position&&(r.position=new W.GeometryAttribute({componentDatatype:N.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:d})),a.normal&&(r.normal=new W.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:p})),a.tangent&&(r.tangent=new W.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:u})),a.bitangent&&(r.bitangent=new W.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:f})),a.st&&(r.st=new W.GeometryAttribute({componentDatatype:N.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:h}));var V=n/3;n-=6*(i+1);var G=U.IndexDatatype.createTypedArray(V,n),P=0;for(F=0;F<V-2;F+=2){var T=F,z=F+2,O=I.Cartesian3.fromArray(d,3*T,Y),R=I.Cartesian3.fromArray(d,3*z,Z);I.Cartesian3.equalsEpsilon(O,R,M.CrystalMath.EPSILON10)||(O=F+1,R=F+3,G[P++]=O,G[P++]=T,G[P++]=R,G[P++]=R,G[P++]=T,G[P++]=z)}return new W.Geometry({attributes:r,indices:G,primitiveType:W.PrimitiveType.TRIANGLES,boundingSphere:new q.BoundingSphere.fromVertices(d)})}},function(e,t){return(e=S.defined(t)?u.unpack(e,t):e)._ellipsoid=I.Ellipsoid.clone(e._ellipsoid),u.createGeometry(e)}});
