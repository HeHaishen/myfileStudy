define(["./AttributeCompression-dc95bf1b","./Cartesian2-fe435665","./IndexDatatype-5483de1e","./Math-e9e583a9","./createTaskProcessorWorker","./when-23b1aa97","./WebGLConstants-c32c4572"],function(B,R,U,T,a,t,e){"use strict";var V=32767,i=Math.cos(T.CrystalMath.toRadians(150)),W=new R.Cartographic,q=new R.Cartesian3;var z=new R.Cartographic,L=new R.Cartographic;function _(a){var t=8*a,e=3*t,r=4*t;this.startEllipsoidNormals=new Float32Array(e),this.endEllipsoidNormals=new Float32Array(e),this.startPositionAndHeights=new Float32Array(r),this.startFaceNormalAndVertexCornerIds=new Float32Array(r),this.endPositionAndHeights=new Float32Array(r),this.endFaceNormalAndHalfWidths=new Float32Array(r),this.vertexBatchIds=new Uint16Array(t),this.indices=U.IndexDatatype.createTypedArray(t,36*a),this.vec3Offset=0,this.vec4Offset=0,this.batchIdOffset=0,this.indexOffset=0,this.volumeStartIndex=0}var o=new R.Cartesian3,d=new R.Cartesian3;function H(a,t,e,r,s){var n=R.Cartesian3.subtract(e,t,d),e=R.Cartesian3.subtract(t,a,o);return R.Cartesian3.normalize(n,n),R.Cartesian3.normalize(e,e),R.Cartesian3.dot(n,e)<i&&(e=R.Cartesian3.multiplyByScalar(e,-1,o)),R.Cartesian3.add(n,e,s),R.Cartesian3.equals(s,R.Cartesian3.ZERO)&&(s=R.Cartesian3.subtract(a,t)),R.Cartesian3.cross(s,r,s),R.Cartesian3.cross(r,s,s),R.Cartesian3.normalize(s,s),s}var O=[0,2,6,0,6,4,0,1,3,0,3,2,0,4,5,0,5,1,5,3,1,5,7,3,7,5,4,7,4,6,7,6,2,7,2,3],P=O.length,S=new R.Cartesian3,D=new R.Cartesian3,M=new R.Cartesian3,G=new R.Cartesian3,Z=new R.Cartesian3;_.prototype.addVolume=function(a,t,e,r,s,n,i,o,d,l){for(var c=R.Cartesian3.add(t,d,S),h=l.geodeticSurfaceNormal(c,D),c=R.Cartesian3.add(e,d,S),f=l.geodeticSurfaceNormal(c,G),u=H(a,t,e,h,M),C=H(r,e,t,f,Z),p=this.startEllipsoidNormals,A=this.endEllipsoidNormals,v=this.startPositionAndHeights,w=this.startFaceNormalAndVertexCornerIds,b=this.endPositionAndHeights,m=this.endFaceNormalAndHalfWidths,g=this.vertexBatchIds,y=this.batchIdOffset,N=this.vec3Offset,I=this.vec4Offset,k=0;k<8;k++)R.Cartesian3.pack(h,p,N),R.Cartesian3.pack(f,A,N),R.Cartesian3.pack(t,v,I),v[I+3]=s,R.Cartesian3.pack(e,b,I),b[I+3]=n,R.Cartesian3.pack(u,w,I),w[I+3]=k,R.Cartesian3.pack(C,m,I),m[I+3]=i,g[y++]=o,N+=3,I+=4;this.batchIdOffset=y,this.vec3Offset=N,this.vec4Offset=I;var x=this.indices,E=this.volumeStartIndex,F=this.indexOffset;for(k=0;k<P;k++)x[F+k]=O[k]+E;this.volumeStartIndex+=8,this.indexOffset+=P};var Y=new R.Rectangle,j=new R.Ellipsoid,J=new R.Cartesian3,K=new R.Cartesian3,Q=new R.Cartesian3,X=new R.Cartesian3,$=new R.Cartesian3;return a(function(a,t){var e=new Uint16Array(a.positions),r=new Uint16Array(a.widths),s=new Uint32Array(a.counts),n=new Uint16Array(a.batchIds),i=Y,o=j,d=J,l=new Float64Array(a.packedBuffer),c=0,h=l[c++],f=l[c++];R.Rectangle.unpack(l,2,i),c+=R.Rectangle.packedLength,R.Ellipsoid.unpack(l,c,o),c+=R.Ellipsoid.packedLength,R.Cartesian3.unpack(l,c,d);var a=e.length/3,l=e.subarray(0,a),c=e.subarray(a,2*a),u=e.subarray(2*a,3*a);B.AttributeCompression.zigZagDeltaDecode(l,c,u),function(a,t,e,r){for(var s=r.length,n=a.length,i=new Uint8Array(n),o=z,d=L,l=0,c=0;c<s;c++){for(var h=r[c],f=h,u=1;u<h;u++){var C=l+u,p=C-1;d.longitude=a[C],d.latitude=t[C],o.longitude=a[p],o.latitude=t[p],R.Cartographic.equals(d,o)&&(f--,i[p]=1)}r[c]=f,l+=h}for(var A=0,v=0;v<n;v++)1!==i[v]&&(a[A]=a[v],t[A]=t[v],e[A]=e[v],A++)}(l,c,u,s);for(var C=s.length,p=0,A=0;A<C;A++)p+=s[A]-1;var v=new _(p),w=function(a,t,e,r,s,n,i,o){for(var d=a.length,l=new Float32Array(3*d),c=0;c<d;++c){var h=a[c],f=t[c],u=e[c],h=T.CrystalMath.lerp(r.west,r.east,h/V),f=T.CrystalMath.lerp(r.south,r.north,f/V),u=T.CrystalMath.lerp(s,n,u/V),u=R.Cartographic.fromRadians(h,f,u,W),u=i.cartographicToCartesian(u,q),u=R.Cartesian3.subtract(u,o,q);R.Cartesian3.pack(u,l,3*c)}return l}(l,c,u,i,h,f,o,d),b=0,m=0;for(A=0;A<C;A++){for(var g=s[A]-1,y=.5*r[A],N=n[A],I=b,k=0;k<g;k++){var x=R.Cartesian3.unpack(w,b,Q),E=R.Cartesian3.unpack(w,b+3,X),F=u[m],H=u[m+1],F=T.CrystalMath.lerp(h,f,F/V),H=T.CrystalMath.lerp(h,f,H/V);m++;var O,P,S,D=K,M=$;0===k?(O=I+3*g,P=R.Cartesian3.unpack(w,O,K),R.Cartesian3.equals(P,x)?R.Cartesian3.unpack(w,O-3,D):(S=R.Cartesian3.subtract(x,E,K),D=R.Cartesian3.add(S,x,K))):R.Cartesian3.unpack(w,b-3,D),k===g-1?(S=R.Cartesian3.unpack(w,I,$),R.Cartesian3.equals(S,E)?R.Cartesian3.unpack(w,I+3,M):(S=R.Cartesian3.subtract(E,x,$),M=R.Cartesian3.add(S,E,$))):R.Cartesian3.unpack(w,b+6,M),v.addVolume(D,x,E,M,F,H,y,N,d,o),b+=3}b+=3,m++}return i=v.indices,t.push(v.startEllipsoidNormals.buffer),t.push(v.endEllipsoidNormals.buffer),t.push(v.startPositionAndHeights.buffer),t.push(v.startFaceNormalAndVertexCornerIds.buffer),t.push(v.endPositionAndHeights.buffer),t.push(v.endFaceNormalAndHalfWidths.buffer),t.push(v.vertexBatchIds.buffer),t.push(i.buffer),{indexDatatype:2===i.BYTES_PER_ELEMENT?U.IndexDatatype.UNSIGNED_SHORT:U.IndexDatatype.UNSIGNED_INT,startEllipsoidNormals:v.startEllipsoidNormals.buffer,endEllipsoidNormals:v.endEllipsoidNormals.buffer,startPositionAndHeights:v.startPositionAndHeights.buffer,startFaceNormalAndVertexCornerIds:v.startFaceNormalAndVertexCornerIds.buffer,endPositionAndHeights:v.endPositionAndHeights.buffer,endFaceNormalAndHalfWidths:v.endFaceNormalAndHalfWidths.buffer,vertexBatchIds:v.vertexBatchIds.buffer,indices:i.buffer}})});
