define(["exports","./Cartesian2-fe435665","./Math-e9e583a9","./when-23b1aa97"],function(t,M,c,g){"use strict";function u(t,a,i){if(0===t)return a*i;var e=t*t,n=e*e,s=n*e,h=s*e,r=h*e,t=r*e,i=i;return a*((1-e/4-3*n/64-5*s/256-175*h/16384-441*r/65536-4851*t/1048576)*i-(3*e/8+3*n/32+45*s/1024+105*h/4096+2205*r/131072+6237*t/524288)*Math.sin(2*i)+(15*n/256+45*s/1024+525*h/16384+1575*r/65536+155925*t/8388608)*Math.sin(4*i)-(35*s/3072+175*h/12288+3675*r/262144+13475*t/1048576)*Math.sin(6*i)+(315*h/131072+2205*r/524288+43659*t/8388608)*Math.sin(8*i)-(693*r/1310720+6237*t/5242880)*Math.sin(10*i)+1001*t/8388608*Math.sin(12*i))}function d(t,a){if(0===t)return Math.log(Math.tan(.5*(c.CrystalMath.PI_OVER_TWO+a)));var i=t*Math.sin(a);return Math.log(Math.tan(.5*(c.CrystalMath.PI_OVER_TWO+a)))-t/2*Math.log((1+i)/(1-i))}var o=new M.Cartesian3,_=new M.Cartesian3;function e(t,a,i,e){M.Cartesian3.normalize(e.cartographicToCartesian(a,_),o),M.Cartesian3.normalize(e.cartographicToCartesian(i,_),_);var n,s=e.maximumRadius,h=e.minimumRadius,r=s*s,l=h*h;t._ellipticitySquared=(r-l)/r,t._ellipticity=Math.sqrt(t._ellipticitySquared),t._start=M.Cartographic.clone(a,t._start),t._start.height=0,t._end=M.Cartographic.clone(i,t._end),t._end.height=0,t._heading=(n=t,s=a.longitude,h=a.latitude,l=i.longitude,r=i.latitude,h=d(n._ellipticity,h),r=d(n._ellipticity,r),Math.atan2(c.CrystalMath.negativePiToPi(l-s),r-h)),t._distance=(l=t,s=e.maximumRadius,r=e.minimumRadius,h=a.longitude,t=a.latitude,e=i.longitude,a=i.latitude,i=l._heading,e-=h,h=0,h=c.CrystalMath.equalsEpsilon(Math.abs(i),c.CrystalMath.PI_OVER_TWO,c.CrystalMath.EPSILON8)?s===r?s*Math.cos(t)*c.CrystalMath.negativePiToPi(e):(r=Math.sin(t),s*Math.cos(t)*c.CrystalMath.negativePiToPi(e)/Math.sqrt(1-l._ellipticitySquared*r*r)):(t=u(l._ellipticity,s,t),(u(l._ellipticity,s,a)-t)/Math.cos(i)),Math.abs(h))}function l(t,a,i,e,n,s){if(0===i)return M.Cartographic.clone(t,s);var h,r,l,o=n*n;return l=Math.abs(c.CrystalMath.PI_OVER_TWO-Math.abs(a))>c.CrystalMath.EPSILON8?(h=function(t,a,i){var e=t/i;if(0===a)return e;var n=e*e,s=n*e,h=s*e,r=a*a,l=r*r,o=l*r,u=o*r,d=u*r,M=d*r,c=Math.sin(2*e),g=Math.cos(2*e),_=Math.sin(4*e),p=Math.cos(4*e),y=Math.sin(6*e),C=Math.cos(6*e),t=Math.sin(8*e),i=Math.cos(8*e),a=Math.sin(10*e);return e+e*r/4+7*e*l/64+15*e*o/256+579*e*u/16384+1515*e*d/65536+16837*e*M/1048576+(3*e*l/16+45*e*o/256-e*(32*n-561)*u/4096-e*(232*n-1677)*d/16384+e*(399985-90560*n+512*h)*M/5242880)*g+(21*e*o/256+483*e*u/4096-e*(224*n-1969)*d/16384-e*(33152*n-112599)*M/1048576)*p+(151*e*u/4096+4681*e*d/65536+1479*e*M/16384-453*s*M/32768)*C+(1097*e*d/65536+42783*e*M/1048576)*i+8011*e*M/1048576*Math.cos(10*e)+(3*r/8+3*l/16+213*o/2048-3*n*o/64+255*u/4096-33*n*u/512+20861*d/524288-33*n*d/512+h*d/1024+28273*M/1048576-471*n*M/8192+9*h*M/4096)*c+(21*l/256+21*o/256+533*u/8192-21*n*u/512+197*d/4096-315*n*d/4096+584039*M/16777216-12517*n*M/131072+7*h*M/2048)*_+(151*o/6144+151*u/4096+5019*d/131072-453*n*d/16384+26965*M/786432-8607*n*M/131072)*y+(1097*u/131072+1097*d/65536+225797*M/10485760-1097*n*M/65536)*t+(8011*d/2621440+8011*M/1048576)*a+293393*M/251658240*Math.sin(12*e)}(u(n,e,t.latitude)+i*Math.cos(a),n,e),l=d(n,t.latitude),r=d(n,h),l=Math.tan(a)*(r-l),c.CrystalMath.negativePiToPi(t.longitude+l)):(h=t.latitude,l=i/(0===n?e*Math.cos(t.latitude):(n=Math.sin(t.latitude),e*Math.cos(t.latitude)/Math.sqrt(1-o*n*n))),0<a?c.CrystalMath.negativePiToPi(t.longitude+l):c.CrystalMath.negativePiToPi(t.longitude-l)),g.defined(s)?(s.longitude=l,s.latitude=h,s.height=0,s):new M.Cartographic(l,h,0)}function p(t,a,i){i=g.defaultValue(i,M.Ellipsoid.WGS84);this._ellipsoid=i,this._start=new M.Cartographic,this._end=new M.Cartographic,this._heading=void 0,this._distance=void 0,this._ellipticity=void 0,this._ellipticitySquared=void 0,g.defined(t)&&g.defined(a)&&e(this,t,a,i)}Object.defineProperties(p.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},heading:{get:function(){return this._heading}}}),p.fromStartHeadingDistance=function(t,a,i,e,n){var s=g.defaultValue(e,M.Ellipsoid.WGS84),h=s.maximumRadius,r=s.minimumRadius,h=h*h,r=r*r,h=Math.sqrt((h-r)/h),h=l(t,a=c.CrystalMath.negativePiToPi(a),i,s.maximumRadius,h);return!g.defined(n)||g.defined(e)&&!e.equals(n.ellipsoid)?new p(t,h,s):(n.setEndPoints(t,h),n)},p.prototype.setEndPoints=function(t,a){e(this,t,a,this._ellipsoid)},p.prototype.interpolateUsingFraction=function(t,a){return this.interpolateUsingSurfaceDistance(t*this._distance,a)},p.prototype.interpolateUsingSurfaceDistance=function(t,a){return l(this._start,this._heading,t,this._ellipsoid.maximumRadius,this._ellipticity,a)},p.prototype.findIntersectionWithLongitude=function(t,a){var i=this._ellipticity,e=this._heading,n=Math.abs(e),s=this._start;if(t=c.CrystalMath.negativePiToPi(t),c.CrystalMath.equalsEpsilon(Math.abs(t),Math.PI,c.CrystalMath.EPSILON14)&&(t=c.CrystalMath.sign(s.longitude)*Math.PI),g.defined(a)||(a=new M.Cartographic),Math.abs(c.CrystalMath.PI_OVER_TWO-n)<=c.CrystalMath.EPSILON8)return a.longitude=t,a.latitude=s.latitude,a.height=0,a;if(c.CrystalMath.equalsEpsilon(Math.abs(c.CrystalMath.PI_OVER_TWO-n),c.CrystalMath.PI_OVER_TWO,c.CrystalMath.EPSILON8))return c.CrystalMath.equalsEpsilon(t,s.longitude,c.CrystalMath.EPSILON12)?void 0:(a.longitude=t,a.latitude=c.CrystalMath.PI_OVER_TWO*c.CrystalMath.sign(c.CrystalMath.PI_OVER_TWO-e),a.height=0,a);var h=s.latitude,n=i*Math.sin(h),r=Math.tan(.5*(c.CrystalMath.PI_OVER_TWO+h))*Math.exp((t-s.longitude)/Math.tan(e)),l=(1+n)/(1-n),o=s.latitude;do{var u=o,d=i*Math.sin(u),d=(1+d)/(1-d),o=2*Math.atan(r*Math.pow(d/l,i/2))-c.CrystalMath.PI_OVER_TWO}while(!c.CrystalMath.equalsEpsilon(o,u,c.CrystalMath.EPSILON12));return a.longitude=t,a.latitude=o,a.height=0,a},p.prototype.findIntersectionWithLatitude=function(t,a){var i=this._ellipticity,e=this._heading,n=this._start;if(!c.CrystalMath.equalsEpsilon(Math.abs(e),c.CrystalMath.PI_OVER_TWO,c.CrystalMath.EPSILON8)){var s=d(i,n.latitude),i=d(i,t),s=Math.tan(e)*(i-s),s=c.CrystalMath.negativePiToPi(n.longitude+s);return g.defined(a)?(a.longitude=s,a.latitude=t,a.height=0,a):new M.Cartographic(s,t,0)}},t.EllipsoidRhumbLine=p});
